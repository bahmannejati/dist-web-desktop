{"version":3,"file":"src_Landing2_index_js.js","sources":["webpack://vertical1/./src/Landing2/index.js","webpack://vertical1/./src/Lazy/index.js","webpack://vertical1/./node_modules/react-imported-component/wrapper.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Lazy from '../Lazy';\n\nfunction Landing2({\n  passedRef\n}) {\n  const [counter, setCounter] = useState(0);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCounter(c => c + 1);\n    }, 3000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"main\", {\n    ref: passedRef,\n    style: {\n      backgroundColor: '#000',\n      color: '#fff'\n    }\n  }, \"landing2 results from vertical\", /*#__PURE__*/React.createElement(\"div\", null, \"counter from landing 2 is : \", counter), /*#__PURE__*/React.createElement(\"p\", null, \"inner lazy component :\"), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Lazy, null)));\n}\n\nexport default Landing2;","var importedWrapper = require('react-imported-component/wrapper');\n\nimport React, { useEffect, useState, useRef } from 'react'; // similar ways (more complex) :\n// https://github.com/faceyspacey/babel-plugin-universal-import\n// https://github.com/faceyspacey/react-universal-component/blob/master/src/index.js\n// this way we assume that the vertical server-side bundle is just 1 chunk file,\n// if we want to support splitted chunks for server-side bundle, we should write\n// a babel plugin then add a `require` manually, this way we\n// ensure the module is loaded before rendering\n// for the first release, we do it manually! but a babel plugin\n// can simply do this manual works\n\nconst lazy = {\n  load: () => importedWrapper(\"imported_-njieu2_component\", import(\n  /* webpackChunkName: \"Lazy\" */\n  './Lazy')),\n  id: require.resolveWeak('./Lazy'),\n  chunkName: 'Lazy'\n};\nconst isSSR = typeof window === 'undefined';\n\nfunction getModuleID(id) {\n  return `vertical1:${id}`;\n} // this variables acts as a cache, we assume that the context of this\n// module is shared when it is used multiple times, otherwise the next\n// usages of this module may execute without a cache, so they show a\n// loading\n// if the cache is not shared, we should use a `window[key]` approach\n// instead of `CSRComponentAfterHydrate = module.default;` or use a webpack\n// cache variable\n// TODO: better to use a shared variable to prevent non-necessary loading in some\n// cases, note that cache unused modules should be cleaned up whenever neened\n\n\nlet CSRComponentAfterHydrate = null;\n\nif (!isSSR) {\n  // this just affects the initial hydrate, after the initial hydrate\n  // this code has no effect!\n  // NOTE: when this module is loaded, so it's ok to load the lazy too\n  lazy.load().then(module => {\n    CSRComponentAfterHydrate = module.default;\n\n    window.__receiveVerticalMarkSignal(getModuleID(lazy.id));\n  });\n}\n\nconsole.log('how many times, lazy module added?');\nexport default function Comp() {\n  // during CSR and before the the first hydrate, this component doesn't render!\n  // right after the lazy is loaded, the component will be rendered\n  const [loading, setLoading] = useState(true);\n  const module = useRef();\n  useEffect(() => {\n    // NOTE: the module is already requested in the browser, this\n    // load is just to found out when to hide the loading, so it's not slow\n    lazy.load().then(m => {\n      module.current = m;\n      setLoading(false);\n    });\n  }, []); // what if component is loaded according an state in upper components?\n  // if at the SSR phase, it is not needed, so there is no need to call\n  // add to global chunks, and if at the client side it will be required,\n  // so let the CSR do it by itself! everything is ok.\n\n  if (isSSR) {\n    global.__ADD_VERTICAL_REQUIRED_MARK(getModuleID(lazy.id), lazy.chunkName, lazy.id);\n\n    const Component = __webpack_require__(lazy.id).default;\n\n    return /*#__PURE__*/React.createElement(Component, null);\n  }\n\n  if (CSRComponentAfterHydrate) {\n    return /*#__PURE__*/React.createElement(CSRComponentAfterHydrate, null);\n  }\n\n  if (!loading) {\n    const CSRComponent = module.current.default;\n    return /*#__PURE__*/React.createElement(CSRComponent, null);\n  }\n\n  return /*#__PURE__*/React.createElement(\"p\", null, \"loading module!\");\n}","var importedWrapper = function(marker, realImport) {\n  if (typeof __deoptimization_sideEffect__ !== 'undefined') {\n    __deoptimization_sideEffect__(marker, realImport);\n  }\n  return realImport;\n};\n\nmodule.exports = importedWrapper;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;A","sourceRoot":""}